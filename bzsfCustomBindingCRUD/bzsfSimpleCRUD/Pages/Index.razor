@page "/"
@using System.Threading
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using bzsfSimpleCRUD.Data
@inject OrderService OrderService


<h1>Hello, world!</h1>

<div style="margin-bottom: 20px;">
    Current UI culture (used for localization): @Thread.CurrentThread.CurrentUICulture.Name
    <br />
    Current thread culture (used for date and number formatting): @Thread.CurrentThread.CurrentCulture.Name
</div>

<button class="btn btn-primary" @onclick="OnClick">CRUD</button>
@*<SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>*@
<SfGrid @ref="Grid" TValue="Order" ID="Grid"
        AllowSorting="true" AllowFiltering="true" AllowPaging="true"
        Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel","Search" })">
    <SfDataManager Adaptor="Adaptors.CustomAdaptor">
        <OrderServiceAdaptor></OrderServiceAdaptor>
    </SfDataManager>
    <GridPageSettings PageSize="8"></GridPageSettings>
    <GridEditSettings AllowEditing="true" AllowDeleting="true" AllowAdding="true" Mode="@EditMode.Dialog"></GridEditSettings>
    <GridSearchSettings Fields=@InitSearch Operator=Syncfusion.Blazor.Operator.Contains IgnoreCase="true"></GridSearchSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="@TextAlign.Center" Width="140"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Width="150"></GridColumn>
    </GridColumns>
</SfGrid>

@code{
    SfGrid<Order> Grid;
    string[] InitSearch = (new string[] { "CustomerID" });
    protected override void OnInitialized()
    {
    }

    void OnClick()
    {
        OrderService.Remove();
        Grid.Refresh();
    }

    // Implementing custom adaptor by extending the DataAdaptor class
    //public class CustomAdaptor : DataAdaptor
    //{
    //    public OrderService OrderService { get; set; }
    //    public CustomAdaptor(OrderService orderService)
    //    {
    //        OrderService = orderService;
    //    }
    //    // Performs data Read operation
    //    public override object Read(DataManagerRequest dm, string key = null)
    //    {
    //        IEnumerable<Order> DataSource = OrderService.Items;
    //        if (dm.Search != null && dm.Search.Count > 0)
    //        {
    //            // Searching
    //            DataSource = DataOperations.PerformSearching(DataSource, dm.Search);
    //        }
    //        if (dm.Sorted != null && dm.Sorted.Count > 0)
    //        {
    //            // Sorting
    //            DataSource = DataOperations.PerformSorting(DataSource, dm.Sorted);
    //        }
    //        if (dm.Where != null && dm.Where.Count > 0)
    //        {
    //            // Filtering
    //            DataSource = DataOperations.PerformFiltering(DataSource, dm.Where, dm.Where[0].Operator);
    //        }
    //        int count = DataSource.Cast<Order>().Count();
    //        if (dm.Skip != 0)
    //        {
    //            //Paging
    //            DataSource = DataOperations.PerformSkip(DataSource, dm.Skip);
    //        }
    //        if (dm.Take != 0)
    //        {
    //            DataSource = DataOperations.PerformTake(DataSource, dm.Take);
    //        }
    //        return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
    //    }

    //    // Performs Insert operation
    //    public override object Insert(DataManager dm, object value, string key)
    //    {
    //        Orders.Insert(0, value as Order);
    //        return value;
    //    }

    //    // Performs Remove operation
    //    public override object Remove(DataManager dm, object value, string keyField, string key)
    //    {
    //        Orders.Remove(Orders.Where(or => or.OrderID == int.Parse(value.ToString())).FirstOrDefault());
    //        return value;
    //    }

    //    // Performs Update operation
    //    public override object Update(DataManager dm, object value, string keyField, string key)
    //    {
    //        var data = Orders.Where(or => or.OrderID == (value as Order).OrderID).FirstOrDefault();
    //        if (data != null)
    //        {
    //            data.OrderID = (value as Order).OrderID;
    //            data.CustomerID = (value as Order).CustomerID;
    //            data.Freight = (value as Order).Freight;
    //        }
    //        return value;
    //    }

    //    // Performs BatchUpdate operation
    //    public override object BatchUpdate(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
    //    {
    //        if (Changed != null)
    //        {
    //            foreach (var rec in (IEnumerable<Order>)Changed)
    //            {
    //                Order val = Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault();
    //                val.OrderID = rec.OrderID;
    //                val.CustomerID = rec.CustomerID;
    //                val.Freight = rec.Freight;
    //            }

    //        }
    //        if (Added != null)
    //        {
    //            foreach (var rec in (IEnumerable<Order>)Added)
    //            {
    //                Orders.Add(rec);
    //            }

    //        }
    //        if (Deleted != null)
    //        {
    //            foreach (var rec in (IEnumerable<Order>)Deleted)
    //            {
    //                Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
    //            }

    //        }
    //        return Orders;
    //    }
    //}
}